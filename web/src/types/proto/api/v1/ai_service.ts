// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/ai_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Memo } from "./memo_service";

export const protobufPackage = "memos.api.v1";

/** Request message for GenerateAISummary method. */
export interface GenerateAISummaryRequest {
  /**
   * The time range for selecting source memos.
   * Supported values: "7d", "30d", "90d", "custom"
   * If "custom" is specified, start_date and end_date must be provided.
   */
  timeRange: string;
  /**
   * Optional. Tags to filter source memos.
   * Only memos containing these tags will be included in the summary.
   */
  tags: string[];
  /**
   * Optional. The start date for custom time range.
   * Format: YYYY-MM-DD
   * Required when time_range is "custom".
   */
  startDate: string;
  /**
   * Optional. The end date for custom time range.
   * Format: YYYY-MM-DD
   * Required when time_range is "custom".
   */
  endDate: string;
}

/** Request message for TestAIConfig method. */
export interface TestAIConfigRequest {
}

/** Response message for TestAIConfig method. */
export interface TestAIConfigResponse {
  /** Whether the AI configuration test was successful. */
  success: boolean;
  /** Optional. Error message if the test failed. */
  errorMessage: string;
  /** Optional. Additional details about the test result. */
  details: string;
}

/** Request message for GetMemoSourceMemos method. */
export interface GetMemoSourceMemosRequest {
  /**
   * Required. The resource name of the AI memo.
   * Format: memos/{memo}
   */
  name: string;
  /**
   * Optional. The maximum number of source memos to return.
   * The service may return fewer than this value.
   * If unspecified, at most 50 memos will be returned.
   * The maximum value is 100; values above 100 will be coerced to 100.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `GetMemoSourceMemos` call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
}

/** Response message for GetMemoSourceMemos method. */
export interface GetMemoSourceMemosResponse {
  /** The list of source memos that were used to generate the AI summary. */
  memos: Memo[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** The total count of source memos (may be approximate). */
  totalSize: number;
}

function createBaseGenerateAISummaryRequest(): GenerateAISummaryRequest {
  return { timeRange: "", tags: [], startDate: "", endDate: "" };
}

export const GenerateAISummaryRequest: MessageFns<GenerateAISummaryRequest> = {
  encode(message: GenerateAISummaryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeRange !== "") {
      writer.uint32(10).string(message.timeRange);
    }
    for (const v of message.tags) {
      writer.uint32(18).string(v!);
    }
    if (message.startDate !== "") {
      writer.uint32(26).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(34).string(message.endDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAISummaryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAISummaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.timeRange = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GenerateAISummaryRequest>): GenerateAISummaryRequest {
    return GenerateAISummaryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAISummaryRequest>): GenerateAISummaryRequest {
    const message = createBaseGenerateAISummaryRequest();
    message.timeRange = object.timeRange ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    return message;
  },
};

function createBaseTestAIConfigRequest(): TestAIConfigRequest {
  return {};
}

export const TestAIConfigRequest: MessageFns<TestAIConfigRequest> = {
  encode(_: TestAIConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestAIConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestAIConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<TestAIConfigRequest>): TestAIConfigRequest {
    return TestAIConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TestAIConfigRequest>): TestAIConfigRequest {
    const message = createBaseTestAIConfigRequest();
    return message;
  },
};

function createBaseTestAIConfigResponse(): TestAIConfigResponse {
  return { success: false, errorMessage: "", details: "" };
}

export const TestAIConfigResponse: MessageFns<TestAIConfigResponse> = {
  encode(message: TestAIConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== "") {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.details !== "") {
      writer.uint32(26).string(message.details);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestAIConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestAIConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.details = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<TestAIConfigResponse>): TestAIConfigResponse {
    return TestAIConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestAIConfigResponse>): TestAIConfigResponse {
    const message = createBaseTestAIConfigResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? "";
    message.details = object.details ?? "";
    return message;
  },
};

function createBaseGetMemoSourceMemosRequest(): GetMemoSourceMemosRequest {
  return { name: "", pageSize: 0, pageToken: "" };
}

export const GetMemoSourceMemosRequest: MessageFns<GetMemoSourceMemosRequest> = {
  encode(message: GetMemoSourceMemosRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMemoSourceMemosRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMemoSourceMemosRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetMemoSourceMemosRequest>): GetMemoSourceMemosRequest {
    return GetMemoSourceMemosRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMemoSourceMemosRequest>): GetMemoSourceMemosRequest {
    const message = createBaseGetMemoSourceMemosRequest();
    message.name = object.name ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseGetMemoSourceMemosResponse(): GetMemoSourceMemosResponse {
  return { memos: [], nextPageToken: "", totalSize: 0 };
}

export const GetMemoSourceMemosResponse: MessageFns<GetMemoSourceMemosResponse> = {
  encode(message: GetMemoSourceMemosResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.memos) {
      Memo.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMemoSourceMemosResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMemoSourceMemosResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.memos.push(Memo.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetMemoSourceMemosResponse>): GetMemoSourceMemosResponse {
    return GetMemoSourceMemosResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMemoSourceMemosResponse>): GetMemoSourceMemosResponse {
    const message = createBaseGetMemoSourceMemosResponse();
    message.memos = object.memos?.map((e) => Memo.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

export type AIServiceDefinition = typeof AIServiceDefinition;
export const AIServiceDefinition = {
  name: "AIService",
  fullName: "memos.api.v1.AIService",
  methods: {
    /** GenerateAISummary generates an AI summary for memos within a specified time range and tags. */
    generateAISummary: {
      name: "GenerateAISummary",
      requestType: GenerateAISummaryRequest,
      requestStream: false,
      responseType: Memo,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              34,
              58,
              1,
              42,
              34,
              29,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              47,
              115,
              117,
              109,
              109,
              97,
              114,
              105,
              101,
              115,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** TestAIConfig tests the AI configuration by sending a test request to the AI provider. */
    testAIConfig: {
      name: "TestAIConfig",
      requestType: TestAIConfigRequest,
      requestStream: false,
      responseType: TestAIConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              27,
              58,
              1,
              42,
              34,
              22,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              58,
              116,
              101,
              115,
              116,
            ]),
          ],
        },
      },
    },
    /** GetMemoSourceMemos retrieves the source memos that were used to generate an AI summary. */
    getMemoSourceMemos: {
      name: "GetMemoSourceMemos",
      requestType: GetMemoSourceMemosRequest,
      requestStream: false,
      responseType: GetMemoSourceMemosResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([4, 110, 97, 109, 101])],
          578365826: [
            new Uint8Array([
              36,
              18,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              109,
              101,
              109,
              111,
              115,
              47,
              42,
              125,
              47,
              115,
              111,
              117,
              114,
              99,
              101,
              77,
              101,
              109,
              111,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
